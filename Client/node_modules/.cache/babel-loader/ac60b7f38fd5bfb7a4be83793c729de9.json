{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Tung Thanh\\\\Desktop\\\\Project_HPT\\\\react-spring-messenger-project\\\\Client\\\\src\\\\context\\\\auth-context.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useContext, useEffect, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { setAlerts, setAuthLoading, setUserId, setUserWsToken, setWsUserGroups } from \"../reducers\";\nimport { HttpService } from \"../service/http-service\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/React.createContext({});\nexport const AuthContextProvider = _ref => {\n  _s();\n  let {\n    children\n  } = _ref;\n  const [user, setUser] = useState();\n  const dispatch = useDispatch();\n  useEffect(() => {\n    async function authInit() {\n      try {\n        const response = await new HttpService().pingRoute();\n        const {\n          user,\n          groupsWrapper\n        } = response.data;\n        setUser(user);\n        dispatch(setUserWsToken({\n          wsToken: user.wsToken\n        }));\n        dispatch(setUserId({\n          userId: user.id\n        }));\n        dispatch(setWsUserGroups({\n          groups: groupsWrapper\n        }));\n      } catch (error) {\n        dispatch(setAlerts({\n          alert: {\n            isOpen: true,\n            alert: \"warning\",\n            text: \"You are not authenticated.\"\n          }\n        }));\n      } finally {\n        dispatch(setAuthLoading({\n          isLoading: false\n        }));\n      }\n    }\n    authInit();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      setUser\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthContextProvider, \"XNH930J4ClhRDUBAtZOZ+XP7VQA=\", false, function () {\n  return [useDispatch];\n});\n_c = AuthContextProvider;\nexport const useAuthContext = () => {\n  _s2();\n  return useContext(AuthContext);\n};\n_s2(useAuthContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"AuthContextProvider\");","map":{"version":3,"names":["React","useContext","useEffect","useState","useDispatch","setAlerts","setAuthLoading","setUserId","setUserWsToken","setWsUserGroups","HttpService","AuthContext","createContext","AuthContextProvider","children","user","setUser","dispatch","authInit","response","pingRoute","groupsWrapper","data","wsToken","userId","id","groups","error","alert","isOpen","text","isLoading","useAuthContext"],"sources":["C:/Users/Tung Thanh/Desktop/Project_HPT/react-spring-messenger-project/Client/src/context/auth-context.tsx"],"sourcesContent":["import React, { useContext, useEffect, useState } from \"react\"\r\nimport { useDispatch } from \"react-redux\"\r\nimport { setAlerts, setAuthLoading, setUserId, setUserWsToken, setWsUserGroups } from \"../reducers\"\r\nimport { HttpService } from \"../service/http-service\"\r\nimport { IUser } from \"../interface-contract/user/user-model\"\r\n\r\ntype AuthContextType = {\r\n  user: IUser | undefined\r\n  setUser: (user: IUser | undefined) => void\r\n}\r\n\r\nexport const AuthContext = React.createContext<AuthContextType>({} as AuthContextType)\r\n\r\nexport const AuthContextProvider: React.FunctionComponent<any> = ({ children }) => {\r\n  const [user, setUser] = useState<IUser | undefined>()\r\n  const dispatch = useDispatch()\r\n\r\n  useEffect(() => {\r\n    async function authInit () {\r\n\t try {\r\n\r\n\t   const response = await new HttpService().pingRoute()\r\n\t   const {\r\n\t\tuser,\r\n\t\tgroupsWrapper\r\n\t   } = response.data\r\n\t   setUser(user)\r\n\t   dispatch(setUserWsToken({ wsToken: user.wsToken }))\r\n\t   dispatch(setUserId({ userId: user.id }))\r\n\t   dispatch(setWsUserGroups({ groups: groupsWrapper }))\r\n\t } catch (error) {\r\n\t   dispatch(setAlerts({\r\n\t\talert: {\r\n\t\t  isOpen: true,\r\n\t\t  alert: \"warning\",\r\n\t\t  text: \"You are not authenticated.\"\r\n\t\t}\r\n\t   }))\r\n\t } finally {\r\n\t   dispatch(setAuthLoading({ isLoading: false }))\r\n\t }\r\n    }\r\n\r\n    authInit()\r\n  }, [])\r\n\r\n  return (\r\n    <AuthContext.Provider value={{\r\n\t user,\r\n\t setUser\r\n    }}>\r\n\t {children}\r\n    </AuthContext.Provider>\r\n  )\r\n}\r\n\r\nexport const useAuthContext = (): AuthContextType => useContext(AuthContext)\r\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,UAAU,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC9D,SAASC,WAAW,QAAQ,aAAa;AACzC,SAASC,SAAS,EAAEC,cAAc,EAAEC,SAAS,EAAEC,cAAc,EAAEC,eAAe,QAAQ,aAAa;AACnG,SAASC,WAAW,QAAQ,yBAAyB;AAAA;AAQrD,OAAO,MAAMC,WAAW,gBAAGX,KAAK,CAACY,aAAa,CAAkB,CAAC,CAAC,CAAoB;AAEtF,OAAO,MAAMC,mBAAiD,GAAG,QAAkB;EAAA;EAAA,IAAjB;IAAEC;EAAS,CAAC;EAC5E,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGb,QAAQ,EAAqB;EACrD,MAAMc,QAAQ,GAAGb,WAAW,EAAE;EAE9BF,SAAS,CAAC,MAAM;IACd,eAAegB,QAAQ,GAAI;MAC7B,IAAI;QAEF,MAAMC,QAAQ,GAAG,MAAM,IAAIT,WAAW,EAAE,CAACU,SAAS,EAAE;QACpD,MAAM;UACRL,IAAI;UACJM;QACE,CAAC,GAAGF,QAAQ,CAACG,IAAI;QACjBN,OAAO,CAACD,IAAI,CAAC;QACbE,QAAQ,CAACT,cAAc,CAAC;UAAEe,OAAO,EAAER,IAAI,CAACQ;QAAQ,CAAC,CAAC,CAAC;QACnDN,QAAQ,CAACV,SAAS,CAAC;UAAEiB,MAAM,EAAET,IAAI,CAACU;QAAG,CAAC,CAAC,CAAC;QACxCR,QAAQ,CAACR,eAAe,CAAC;UAAEiB,MAAM,EAAEL;QAAc,CAAC,CAAC,CAAC;MACtD,CAAC,CAAC,OAAOM,KAAK,EAAE;QACdV,QAAQ,CAACZ,SAAS,CAAC;UACrBuB,KAAK,EAAE;YACLC,MAAM,EAAE,IAAI;YACZD,KAAK,EAAE,SAAS;YAChBE,IAAI,EAAE;UACR;QACE,CAAC,CAAC,CAAC;MACL,CAAC,SAAS;QACRb,QAAQ,CAACX,cAAc,CAAC;UAAEyB,SAAS,EAAE;QAAM,CAAC,CAAC,CAAC;MAChD;IACE;IAEAb,QAAQ,EAAE;EACZ,CAAC,EAAE,EAAE,CAAC;EAEN,oBACE,QAAC,WAAW,CAAC,QAAQ;IAAC,KAAK,EAAE;MAC/BH,IAAI;MACJC;IACE,CAAE;IAAA,UACHF;EAAQ;IAAA;IAAA;IAAA;EAAA,QACgB;AAE3B,CAAC;AAAA,GAzCYD,mBAAiD;EAAA,QAE3CT,WAAW;AAAA;AAAA,KAFjBS,mBAAiD;AA2C9D,OAAO,MAAMmB,cAAc,GAAG;EAAA;EAAA,OAAuB/B,UAAU,CAACU,WAAW,CAAC;AAAA;AAAA,IAA/DqB,cAAc;AAAA;AAAA"},"metadata":{},"sourceType":"module"}