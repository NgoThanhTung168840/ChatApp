{"ast":null,"code":"import moment from \"moment\";\nexport function dateParser(date) {\n  const messageDate = moment(date, \"YYYY-MM-DD HH:mm:ss\").fromNow();\n  if (messageDate.includes(\"year\")) {\n    return moment(date, \"YYYY-MM-DD HH:mm:ss\").fromNow(true);\n  }\n  if (messageDate.includes(\"month\")) {\n    return moment(date, \"YYYY-MM-DD HH:mm:ss\").fromNow(true).replace(\"a\", \"1\");\n  }\n  if (messageDate.includes(\"day\")) {\n    return moment(date, \"YYYY-MM-DD HH:mm:ss\").fromNow(true);\n  }\n  if (messageDate.includes(\"hour\")) {\n    if (messageDate.includes(\"hours\")) {\n      return moment(date, \"YYYY-MM-DD HH:mm:ss\").fromNow(true);\n    }\n    return moment(date, \"YYYY-MM-DD HH:mm:ss\").fromNow(true).replace(\"an\", \"1\");\n  }\n  if (messageDate.includes(\"minutes\") || messageDate.includes(\"minute\")) {\n    return moment(date, \"YYYY-MM-DD HH:mm:ss\").fromNow(true);\n  }\n  if (messageDate.includes(\"seconds\")) {\n    return \"1 min\";\n  }\n  return \"\";\n}","map":{"version":3,"names":["moment","dateParser","date","messageDate","fromNow","includes","replace"],"sources":["C:/Users/Tung Thanh/Desktop/Project_HPT/react-spring-messenger-project/Client/src/utils/date-formater.ts"],"sourcesContent":["import moment from \"moment\"\r\n\r\nexport function dateParser (date: string): string {\r\n  const messageDate = moment(date, \"YYYY-MM-DD HH:mm:ss\").fromNow()\r\n  if (messageDate.includes(\"year\")) {\r\n    return moment(date, \"YYYY-MM-DD HH:mm:ss\").fromNow(true)\r\n  }\r\n  if (messageDate.includes(\"month\")) {\r\n    return moment(date, \"YYYY-MM-DD HH:mm:ss\").fromNow(true).replace(\"a\", \"1\")\r\n  }\r\n  if (messageDate.includes(\"day\")) {\r\n    return moment(date, \"YYYY-MM-DD HH:mm:ss\").fromNow(true)\r\n  }\r\n  if (messageDate.includes(\"hour\")) {\r\n    if (messageDate.includes(\"hours\")) {\r\n\t return moment(date, \"YYYY-MM-DD HH:mm:ss\").fromNow(true)\r\n    }\r\n    return moment(date, \"YYYY-MM-DD HH:mm:ss\").fromNow(true).replace(\"an\", \"1\")\r\n  }\r\n  if (messageDate.includes(\"minutes\") || messageDate.includes(\"minute\")) {\r\n    return moment(date, \"YYYY-MM-DD HH:mm:ss\").fromNow(true)\r\n  }\r\n  if (messageDate.includes(\"seconds\")) {\r\n    return \"1 min\"\r\n  }\r\n  return \"\"\r\n}\r\n"],"mappings":"AAAA,OAAOA,MAAM,MAAM,QAAQ;AAE3B,OAAO,SAASC,UAAU,CAAEC,IAAY,EAAU;EAChD,MAAMC,WAAW,GAAGH,MAAM,CAACE,IAAI,EAAE,qBAAqB,CAAC,CAACE,OAAO,EAAE;EACjE,IAAID,WAAW,CAACE,QAAQ,CAAC,MAAM,CAAC,EAAE;IAChC,OAAOL,MAAM,CAACE,IAAI,EAAE,qBAAqB,CAAC,CAACE,OAAO,CAAC,IAAI,CAAC;EAC1D;EACA,IAAID,WAAW,CAACE,QAAQ,CAAC,OAAO,CAAC,EAAE;IACjC,OAAOL,MAAM,CAACE,IAAI,EAAE,qBAAqB,CAAC,CAACE,OAAO,CAAC,IAAI,CAAC,CAACE,OAAO,CAAC,GAAG,EAAE,GAAG,CAAC;EAC5E;EACA,IAAIH,WAAW,CAACE,QAAQ,CAAC,KAAK,CAAC,EAAE;IAC/B,OAAOL,MAAM,CAACE,IAAI,EAAE,qBAAqB,CAAC,CAACE,OAAO,CAAC,IAAI,CAAC;EAC1D;EACA,IAAID,WAAW,CAACE,QAAQ,CAAC,MAAM,CAAC,EAAE;IAChC,IAAIF,WAAW,CAACE,QAAQ,CAAC,OAAO,CAAC,EAAE;MACrC,OAAOL,MAAM,CAACE,IAAI,EAAE,qBAAqB,CAAC,CAACE,OAAO,CAAC,IAAI,CAAC;IACtD;IACA,OAAOJ,MAAM,CAACE,IAAI,EAAE,qBAAqB,CAAC,CAACE,OAAO,CAAC,IAAI,CAAC,CAACE,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC;EAC7E;EACA,IAAIH,WAAW,CAACE,QAAQ,CAAC,SAAS,CAAC,IAAIF,WAAW,CAACE,QAAQ,CAAC,QAAQ,CAAC,EAAE;IACrE,OAAOL,MAAM,CAACE,IAAI,EAAE,qBAAqB,CAAC,CAACE,OAAO,CAAC,IAAI,CAAC;EAC1D;EACA,IAAID,WAAW,CAACE,QAAQ,CAAC,SAAS,CAAC,EAAE;IACnC,OAAO,OAAO;EAChB;EACA,OAAO,EAAE;AACX"},"metadata":{},"sourceType":"module"}