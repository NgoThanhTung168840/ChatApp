{"ast":null,"code":"import axios from \"axios\";\nimport { setAlerts, store } from \"../reducers\";\nexport class HttpService {\n  constructor() {\n    this.instance = void 0;\n    const baseURL = process.env.NODE_ENV === \"development\" ? \"http://localhost:9090/api\" : \"http://production-url.com/api\";\n    this.instance = axios.create({\n      withCredentials: true,\n      baseURL\n    });\n    this.instance.interceptors.response.use(response => {\n      return response;\n    }, error => {\n      if (error.message === \"Network Error\") {\n        store.dispatch(setAlerts({\n          alert: {\n            text: \"Unable to reach server. Please try again later.\",\n            alert: \"error\",\n            isOpen: true\n          }\n        }));\n      }\n      return Promise.reject(error);\n    });\n  }\n  authenticate(jwtModel) {\n    return this.instance.post(\"auth\", jwtModel);\n  }\n  async pingRoute() {\n    return this.instance.get(\"fetch\");\n  }\n  async ensureRoomExists(roomId) {\n    return await axios.get(`http://localhost:9090/room/ensure-room-exists/${roomId}`, {\n      withCredentials: true\n    });\n  }\n  logout() {\n    return this.instance.get(\"logout\");\n  }\n  createGroup(groupName) {\n    return this.instance.post(\"create\", {\n      name: groupName\n    });\n  }\n  addUserToGroup(userId, groupUrl) {\n    return this.instance.get(\"user/add/\" + userId + \"/\" + groupUrl);\n  }\n  fetchAllUsersInConversation(groupUrl) {\n    return this.instance.get(\"users/group/\" + groupUrl, {});\n  }\n  fetchAllUsersWithoutAlreadyInGroup(groupUrl) {\n    return this.instance.get(\"users/all/\" + groupUrl, {});\n  }\n  createUser(firstname, lastname, email, password) {\n    return this.instance.post(\"user/register\", {\n      firstname,\n      lastname,\n      email,\n      password\n    });\n  }\n  leaveConversation(userIdToRemove, groupId) {\n    return this.instance.get(\"user/leave/\" + userIdToRemove + \"/group/\" + groupId);\n  }\n  removeUserFromConversation(userIdToRemove, groupUrl) {\n    return this.instance.get(\"user/remove/\" + userIdToRemove + \"/group/\" + groupUrl);\n  }\n  removeAdminUserInConversation(userIdToRemove, groupUrl) {\n    return this.instance.get(\"user/remove/admin/\" + userIdToRemove + \"/group/\" + groupUrl);\n  }\n  grantUserAdminInConversation(userIdToGrant, groupId) {\n    return this.instance.get(\"user/grant/\" + userIdToGrant + \"/group/\" + groupId);\n  }\n  uploadFile(data) {\n    return this.instance.post(\"upload\", data);\n  }\n}","map":{"version":3,"names":["axios","setAlerts","store","HttpService","constructor","instance","baseURL","process","env","NODE_ENV","create","withCredentials","interceptors","response","use","error","message","dispatch","alert","text","isOpen","Promise","reject","authenticate","jwtModel","post","pingRoute","get","ensureRoomExists","roomId","logout","createGroup","groupName","name","addUserToGroup","userId","groupUrl","fetchAllUsersInConversation","fetchAllUsersWithoutAlreadyInGroup","createUser","firstname","lastname","email","password","leaveConversation","userIdToRemove","groupId","removeUserFromConversation","removeAdminUserInConversation","grantUserAdminInConversation","userIdToGrant","uploadFile","data"],"sources":["C:/Users/Tung Thanh/Desktop/Project_HPT/react-spring-messenger-project/Client/src/service/http-service.ts"],"sourcesContent":["import axios, { AxiosInstance, AxiosResponse } from \"axios\"\r\nimport { GroupModel } from \"../interface-contract/group-model\"\r\nimport { IUserWrapper } from \"../interface-contract/user/user-wrapper\"\r\nimport { JwtModel } from \"../interface-contract/jwt-model\"\r\nimport { IUser } from \"../interface-contract/user/user-model\"\r\nimport { GroupUserModel } from \"../interface-contract/group-user-model\"\r\nimport { setAlerts, store } from \"../reducers\"\r\n\r\nexport class HttpService {\r\n\r\n  private instance: AxiosInstance\r\n\r\n  constructor () {\r\n    const baseURL = process.env.NODE_ENV === \"development\" ? \"http://localhost:9090/api\" : \"http://production-url.com/api\"\r\n    this.instance = axios.create({\r\n\t withCredentials: true,\r\n\t baseURL\r\n    })\r\n    this.instance.interceptors.response.use((response) => {\r\n\t return response\r\n    }, (error) => {\r\n\t if (error.message === \"Network Error\") {\r\n\t   store.dispatch(setAlerts({\r\n\t\talert: {\r\n\t\t  text: \"Unable to reach server. Please try again later.\",\r\n\t\t  alert: \"error\",\r\n\t\t  isOpen: true\r\n\t\t}\r\n\t   }))\r\n\t }\r\n\t return Promise.reject(error)\r\n    })\r\n  }\r\n\r\n  authenticate (jwtModel: JwtModel): Promise<AxiosResponse<IUser>> {\r\n    return this.instance.post(\"auth\", jwtModel)\r\n  }\r\n\r\n  public async pingRoute (): Promise<AxiosResponse<IUserWrapper>> {\r\n    return this.instance.get(\"fetch\")\r\n  }\r\n\r\n  public async ensureRoomExists (roomId: string): Promise<AxiosResponse<boolean>> {\r\n    return await axios.get(`http://localhost:9090/room/ensure-room-exists/${roomId}`, { withCredentials: true })\r\n  }\r\n\r\n  public logout (): Promise<AxiosResponse> {\r\n    return this.instance.get(\"logout\")\r\n  }\r\n\r\n  public createGroup (groupName: string): Promise<AxiosResponse<GroupModel>> {\r\n    return this.instance.post(\"create\", { name: groupName })\r\n  }\r\n\r\n  public addUserToGroup (userId: number | string, groupUrl: string): Promise<AxiosResponse> {\r\n    return this.instance.get(\"user/add/\" + userId + \"/\" + groupUrl)\r\n  }\r\n\r\n  public fetchAllUsersInConversation (groupUrl: string): Promise<AxiosResponse<GroupUserModel[]>> {\r\n    return this.instance.get(\"users/group/\" + groupUrl, {})\r\n  }\r\n\r\n  public fetchAllUsersWithoutAlreadyInGroup (groupUrl: string): Promise<AxiosResponse<GroupUserModel[]>> {\r\n    return this.instance.get(\"users/all/\" + groupUrl, {})\r\n  }\r\n\r\n  createUser (firstname: string, lastname: string, email: string, password: string): Promise<AxiosResponse> {\r\n    return this.instance.post(\"user/register\", {\r\n\t firstname,\r\n\t lastname,\r\n\t email,\r\n\t password\r\n    })\r\n  }\r\n\r\n  public leaveConversation (userIdToRemove: number, groupId: string): Promise<AxiosResponse> {\r\n    return this.instance.get(\"user/leave/\" + userIdToRemove + \"/group/\" + groupId)\r\n  }\r\n\r\n  public removeUserFromConversation (userIdToRemove: string | number, groupUrl: string): Promise<AxiosResponse> {\r\n    return this.instance.get(\"user/remove/\" + userIdToRemove + \"/group/\" + groupUrl)\r\n  }\r\n\r\n  public removeAdminUserInConversation (userIdToRemove: string | number, groupUrl: string): Promise<AxiosResponse> {\r\n    return this.instance.get(\"user/remove/admin/\" + userIdToRemove + \"/group/\" + groupUrl)\r\n  }\r\n\r\n  public grantUserAdminInConversation (userIdToGrant: number | string, groupId: string): Promise<AxiosResponse> {\r\n    return this.instance.get(\"user/grant/\" + userIdToGrant + \"/group/\" + groupId)\r\n  }\r\n\r\n  public uploadFile (data: FormData): Promise<AxiosResponse> {\r\n    return this.instance.post(\"upload\", data)\r\n  }\r\n}\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAwC,OAAO;AAM3D,SAASC,SAAS,EAAEC,KAAK,QAAQ,aAAa;AAE9C,OAAO,MAAMC,WAAW,CAAC;EAIvBC,WAAW,GAAI;IAAA,KAFPC,QAAQ;IAGd,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,aAAa,GAAG,2BAA2B,GAAG,+BAA+B;IACtH,IAAI,CAACJ,QAAQ,GAAGL,KAAK,CAACU,MAAM,CAAC;MAC/BC,eAAe,EAAE,IAAI;MACrBL;IACE,CAAC,CAAC;IACF,IAAI,CAACD,QAAQ,CAACO,YAAY,CAACC,QAAQ,CAACC,GAAG,CAAED,QAAQ,IAAK;MACxD,OAAOA,QAAQ;IACb,CAAC,EAAGE,KAAK,IAAK;MAChB,IAAIA,KAAK,CAACC,OAAO,KAAK,eAAe,EAAE;QACrCd,KAAK,CAACe,QAAQ,CAAChB,SAAS,CAAC;UAC3BiB,KAAK,EAAE;YACLC,IAAI,EAAE,iDAAiD;YACvDD,KAAK,EAAE,OAAO;YACdE,MAAM,EAAE;UACV;QACE,CAAC,CAAC,CAAC;MACL;MACA,OAAOC,OAAO,CAACC,MAAM,CAACP,KAAK,CAAC;IAC1B,CAAC,CAAC;EACJ;EAEAQ,YAAY,CAAEC,QAAkB,EAAiC;IAC/D,OAAO,IAAI,CAACnB,QAAQ,CAACoB,IAAI,CAAC,MAAM,EAAED,QAAQ,CAAC;EAC7C;EAEA,MAAaE,SAAS,GAA0C;IAC9D,OAAO,IAAI,CAACrB,QAAQ,CAACsB,GAAG,CAAC,OAAO,CAAC;EACnC;EAEA,MAAaC,gBAAgB,CAAEC,MAAc,EAAmC;IAC9E,OAAO,MAAM7B,KAAK,CAAC2B,GAAG,CAAE,iDAAgDE,MAAO,EAAC,EAAE;MAAElB,eAAe,EAAE;IAAK,CAAC,CAAC;EAC9G;EAEOmB,MAAM,GAA4B;IACvC,OAAO,IAAI,CAACzB,QAAQ,CAACsB,GAAG,CAAC,QAAQ,CAAC;EACpC;EAEOI,WAAW,CAAEC,SAAiB,EAAsC;IACzE,OAAO,IAAI,CAAC3B,QAAQ,CAACoB,IAAI,CAAC,QAAQ,EAAE;MAAEQ,IAAI,EAAED;IAAU,CAAC,CAAC;EAC1D;EAEOE,cAAc,CAAEC,MAAuB,EAAEC,QAAgB,EAA0B;IACxF,OAAO,IAAI,CAAC/B,QAAQ,CAACsB,GAAG,CAAC,WAAW,GAAGQ,MAAM,GAAG,GAAG,GAAGC,QAAQ,CAAC;EACjE;EAEOC,2BAA2B,CAAED,QAAgB,EAA4C;IAC9F,OAAO,IAAI,CAAC/B,QAAQ,CAACsB,GAAG,CAAC,cAAc,GAAGS,QAAQ,EAAE,CAAC,CAAC,CAAC;EACzD;EAEOE,kCAAkC,CAAEF,QAAgB,EAA4C;IACrG,OAAO,IAAI,CAAC/B,QAAQ,CAACsB,GAAG,CAAC,YAAY,GAAGS,QAAQ,EAAE,CAAC,CAAC,CAAC;EACvD;EAEAG,UAAU,CAAEC,SAAiB,EAAEC,QAAgB,EAAEC,KAAa,EAAEC,QAAgB,EAA0B;IACxG,OAAO,IAAI,CAACtC,QAAQ,CAACoB,IAAI,CAAC,eAAe,EAAE;MAC7Ce,SAAS;MACTC,QAAQ;MACRC,KAAK;MACLC;IACE,CAAC,CAAC;EACJ;EAEOC,iBAAiB,CAAEC,cAAsB,EAAEC,OAAe,EAA0B;IACzF,OAAO,IAAI,CAACzC,QAAQ,CAACsB,GAAG,CAAC,aAAa,GAAGkB,cAAc,GAAG,SAAS,GAAGC,OAAO,CAAC;EAChF;EAEOC,0BAA0B,CAAEF,cAA+B,EAAET,QAAgB,EAA0B;IAC5G,OAAO,IAAI,CAAC/B,QAAQ,CAACsB,GAAG,CAAC,cAAc,GAAGkB,cAAc,GAAG,SAAS,GAAGT,QAAQ,CAAC;EAClF;EAEOY,6BAA6B,CAAEH,cAA+B,EAAET,QAAgB,EAA0B;IAC/G,OAAO,IAAI,CAAC/B,QAAQ,CAACsB,GAAG,CAAC,oBAAoB,GAAGkB,cAAc,GAAG,SAAS,GAAGT,QAAQ,CAAC;EACxF;EAEOa,4BAA4B,CAAEC,aAA8B,EAAEJ,OAAe,EAA0B;IAC5G,OAAO,IAAI,CAACzC,QAAQ,CAACsB,GAAG,CAAC,aAAa,GAAGuB,aAAa,GAAG,SAAS,GAAGJ,OAAO,CAAC;EAC/E;EAEOK,UAAU,CAAEC,IAAc,EAA0B;IACzD,OAAO,IAAI,CAAC/C,QAAQ,CAACoB,IAAI,CAAC,QAAQ,EAAE2B,IAAI,CAAC;EAC3C;AACF"},"metadata":{},"sourceType":"module"}