{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Tung Thanh\\\\Desktop\\\\Project_HPT\\\\react-spring-messenger-project\\\\Client\\\\src\\\\context\\\\ws-context.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useContext, useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useAuthContext } from \"./auth-context\";\nimport { useLoaderContext } from \"./loader-context\";\nimport { playNotificationSound } from \"../components/utils/play-sound-notification\";\nimport { initWebSocket } from \"../config/websocket-config\";\nimport { addChatHistory, removeUserFromGroup, setAlerts, setAllMessagesFetched, setCallIncoming, setCallUrl, setGroupMessages, setGroupWithCurrentCall, updateGroupsWithLastMessageSent, wsHealthCheckConnected } from \"../reducers\";\nimport { TransportActionEnum } from \"../utils/transport-action-enum\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const WebSocketContext = /*#__PURE__*/React.createContext({});\nexport const WebsocketContextProvider = _ref => {\n  _s();\n  let {\n    children\n  } = _ref;\n  const [ws, setWsClient] = useState(undefined);\n  const {\n    user\n  } = useAuthContext();\n  const {\n    setLoading\n  } = useLoaderContext();\n  const dispatch = useDispatch();\n  const {\n    userWsToken\n  } = useSelector(state => state.globalReducer);\n  useEffect(() => {\n    if (user && user.wsToken !== null) {\n      setLoading(true);\n      initWs(user).then(() => setLoading(false));\n    }\n    return () => {\n      dispatch(wsHealthCheckConnected({\n        isWsConnected: false\n      }));\n    };\n  }, [userWsToken]);\n  async function initWs(user) {\n    const wsObj = await initWebSocket(user.wsToken);\n    setWsClient(wsObj);\n    wsObj.onConnect = () => {\n      dispatch(wsHealthCheckConnected({\n        isWsConnected: true\n      }));\n      setLoading(false);\n      wsObj.subscribe(`/topic/user/${user.id}`, res => {\n        const data = JSON.parse(res.body);\n        switch (data.action) {\n          case TransportActionEnum.FETCH_GROUP_MESSAGES:\n            {\n              const result = data.object;\n              dispatch(setGroupMessages({\n                messages: result.messages\n              }));\n              dispatch(setAllMessagesFetched({\n                allMessagesFetched: result.lastMessage\n              }));\n              break;\n            }\n          case TransportActionEnum.LEAVE_GROUP:\n            {\n              const {\n                groupUrl,\n                groupName\n              } = data.object;\n              dispatch(removeUserFromGroup({\n                groupUrl\n              }));\n              dispatch(setAlerts({\n                alert: {\n                  alert: \"success\",\n                  isOpen: true,\n                  text: `you left the group ${groupName}`\n                }\n              }));\n              break;\n            }\n          case TransportActionEnum.ADD_CHAT_HISTORY:\n            {\n              const wrapper = data.object;\n              dispatch(setAllMessagesFetched({\n                allMessagesFetched: wrapper.lastMessage\n              }));\n              const messages = wrapper.messages;\n              dispatch(setGroupMessages({\n                messages\n              }));\n            }\n            break;\n          case TransportActionEnum.SEND_GROUP_MESSAGE:\n            break;\n          case TransportActionEnum.NOTIFICATION_MESSAGE:\n            {\n              const message = data.object;\n              dispatch(updateGroupsWithLastMessageSent({\n                userId: user.id,\n                message\n              }));\n              // updateGroupsWithLastMessageSent(dispatch, groups, message, user.id)\n              dispatch(addChatHistory({\n                newMessage: message\n              }));\n              if (message.userId !== user.id) {\n                playNotificationSound();\n              }\n            }\n            break;\n          case TransportActionEnum.CALL_INCOMING:\n            dispatch(setCallIncoming({\n              callStarted: true\n            }));\n            dispatch(setCallUrl({\n              callUrl: data.object\n            }));\n            break;\n          case TransportActionEnum.END_CALL:\n            {\n              const groupUrl = data.object;\n              dispatch(setGroupWithCurrentCall({\n                groupUrl\n              }));\n              break;\n            }\n          default:\n            break;\n        }\n      });\n    };\n    wsObj.onWebSocketClose = evt => {\n      console.log(\"ERROR DURING HANDSHAKE WITH SERVER\", evt);\n      dispatch(wsHealthCheckConnected({\n        isWsConnected: false\n      }));\n    };\n    wsObj.onWebSocketError = evt => {\n      console.log(\"Cannot connect to server\", evt);\n    };\n    wsObj.activate();\n  }\n  return /*#__PURE__*/_jsxDEV(WebSocketContext.Provider, {\n    value: {\n      ws,\n      setWsClient\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 136,\n    columnNumber: 5\n  }, this);\n};\n_s(WebsocketContextProvider, \"DvRI3eYzIreKTlmhMJcIA75wt4o=\", false, function () {\n  return [useAuthContext, useLoaderContext, useDispatch, useSelector];\n});\n_c = WebsocketContextProvider;\nexport const useWebSocketContext = () => {\n  _s2();\n  return useContext(WebSocketContext);\n};\n_s2(useWebSocketContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"WebsocketContextProvider\");","map":{"version":3,"names":["React","useContext","useEffect","useState","useDispatch","useSelector","useAuthContext","useLoaderContext","playNotificationSound","initWebSocket","addChatHistory","removeUserFromGroup","setAlerts","setAllMessagesFetched","setCallIncoming","setCallUrl","setGroupMessages","setGroupWithCurrentCall","updateGroupsWithLastMessageSent","wsHealthCheckConnected","TransportActionEnum","WebSocketContext","createContext","WebsocketContextProvider","children","ws","setWsClient","undefined","user","setLoading","dispatch","userWsToken","state","globalReducer","wsToken","initWs","then","isWsConnected","wsObj","onConnect","subscribe","id","res","data","JSON","parse","body","action","FETCH_GROUP_MESSAGES","result","object","messages","allMessagesFetched","lastMessage","LEAVE_GROUP","groupUrl","groupName","alert","isOpen","text","ADD_CHAT_HISTORY","wrapper","SEND_GROUP_MESSAGE","NOTIFICATION_MESSAGE","message","userId","newMessage","CALL_INCOMING","callStarted","callUrl","END_CALL","onWebSocketClose","evt","console","log","onWebSocketError","activate","useWebSocketContext"],"sources":["C:/Users/Tung Thanh/Desktop/Project_HPT/react-spring-messenger-project/Client/src/context/ws-context.tsx"],"sourcesContent":["import { Client, IMessage } from \"@stomp/stompjs\"\r\nimport React, { useContext, useEffect, useState } from \"react\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { useAuthContext } from \"./auth-context\"\r\nimport { useLoaderContext } from \"./loader-context\"\r\nimport { playNotificationSound } from \"../components/utils/play-sound-notification\"\r\nimport { initWebSocket } from \"../config/websocket-config\"\r\nimport { FullMessageModel } from \"../interface-contract/full-message-model\"\r\nimport { OutputTransportDTO } from \"../interface-contract/input-transport-model\"\r\nimport { WrapperMessageModel } from \"../interface-contract/wrapper-message-model\"\r\nimport {\r\n  addChatHistory,\r\n  removeUserFromGroup, setAlerts,\r\n  setAllMessagesFetched,\r\n  setCallIncoming,\r\n  setCallUrl,\r\n  setGroupMessages, setGroupWithCurrentCall,\r\n  updateGroupsWithLastMessageSent,\r\n  wsHealthCheckConnected\r\n} from \"../reducers\"\r\nimport { StoreState } from \"../reducers/types\"\r\nimport { TransportActionEnum } from \"../utils/transport-action-enum\"\r\nimport { ILeaveGroupModel } from \"../interface-contract/leave-group-model\"\r\nimport { IUser } from \"../interface-contract/user/user-model\"\r\n\r\ntype WebSocketContextType = {\r\n  ws: Client | undefined\r\n  setWsClient: (ws: Client) => void\r\n}\r\n\r\nexport const WebSocketContext = React.createContext<WebSocketContextType>({} as WebSocketContextType)\r\n\r\nexport const WebsocketContextProvider: React.FunctionComponent<any> = ({ children }) => {\r\n  const [ws, setWsClient] = useState<Client | undefined>(undefined)\r\n  const { user } = useAuthContext()\r\n  const { setLoading } = useLoaderContext()\r\n  const dispatch = useDispatch()\r\n  const { userWsToken } = useSelector(\r\n    (state: StoreState) => state.globalReducer\r\n  )\r\n\r\n  useEffect(() => {\r\n    if (user && user.wsToken !== null) {\r\n\t setLoading(true)\r\n\t initWs(user).then(() => (setLoading(false)))\r\n    }\r\n    return () => {\r\n\t dispatch(wsHealthCheckConnected({ isWsConnected: false }))\r\n    }\r\n  }, [userWsToken])\r\n\r\n  async function initWs (user: IUser) {\r\n    const wsObj = await initWebSocket(user.wsToken)\r\n    setWsClient(wsObj)\r\n    wsObj.onConnect = () => {\r\n\t dispatch(wsHealthCheckConnected({ isWsConnected: true }))\r\n\t setLoading(false)\r\n\t wsObj.subscribe(`/topic/user/${user.id}`, (res: IMessage) => {\r\n\t   const data = JSON.parse(res.body) as OutputTransportDTO\r\n\t   switch (data.action) {\r\n\t   case TransportActionEnum.FETCH_GROUP_MESSAGES: {\r\n\t\tconst result = data.object as WrapperMessageModel\r\n\t\tdispatch(setGroupMessages({ messages: result.messages }))\r\n\t\tdispatch(setAllMessagesFetched({\r\n\t\t  allMessagesFetched: result.lastMessage\r\n\t\t}))\r\n\t\tbreak\r\n\t   }\r\n\t   case TransportActionEnum.LEAVE_GROUP: {\r\n\t\tconst {\r\n\t\t  groupUrl,\r\n\t\t  groupName\r\n\t\t} = data.object as ILeaveGroupModel\r\n\t\tdispatch(removeUserFromGroup({ groupUrl }))\r\n\t\tdispatch(setAlerts({\r\n\t\t  alert: {\r\n\t\t    alert: \"success\",\r\n\t\t    isOpen: true,\r\n\t\t    text: `you left the group ${groupName}`\r\n\t\t  }\r\n\t\t}))\r\n\t\tbreak\r\n\t   }\r\n\t   case TransportActionEnum.ADD_CHAT_HISTORY: {\r\n\t\tconst wrapper = data.object as WrapperMessageModel\r\n\t\tdispatch(setAllMessagesFetched({ allMessagesFetched: wrapper.lastMessage }))\r\n\t\tconst messages = wrapper.messages\r\n\t\tdispatch(setGroupMessages({ messages }))\r\n\t   }\r\n\t\tbreak\r\n\t   case TransportActionEnum.SEND_GROUP_MESSAGE:\r\n\t\tbreak\r\n\t   case TransportActionEnum.NOTIFICATION_MESSAGE: {\r\n\t\tconst message = data.object as FullMessageModel\r\n\t\tdispatch(updateGroupsWithLastMessageSent({\r\n\t\t  userId: user.id,\r\n\t\t  message\r\n\t\t}))\r\n\t\t// updateGroupsWithLastMessageSent(dispatch, groups, message, user.id)\r\n\t\tdispatch(addChatHistory({ newMessage: message }))\r\n\t\tif (message.userId !== user.id) {\r\n\t\t  playNotificationSound()\r\n\t\t}\r\n\t   }\r\n\t\tbreak\r\n\t   case TransportActionEnum.CALL_INCOMING:\r\n\t\tdispatch(setCallIncoming({ callStarted: true }))\r\n\t\tdispatch(setCallUrl({\r\n\t\t  callUrl: data.object as unknown as string\r\n\t\t}))\r\n\t\tbreak\r\n\t   case TransportActionEnum.END_CALL: {\r\n\t\tconst groupUrl = data.object as unknown as string\r\n\t\tdispatch(setGroupWithCurrentCall({ groupUrl }))\r\n\t\tbreak\r\n\t   }\r\n\t   default:\r\n\t\tbreak\r\n\t   }\r\n\t })\r\n\r\n    }\r\n\r\n    wsObj.onWebSocketClose = (evt) => {\r\n\t console.log(\"ERROR DURING HANDSHAKE WITH SERVER\", evt)\r\n\t dispatch(wsHealthCheckConnected({ isWsConnected: false }))\r\n    }\r\n\r\n    wsObj.onWebSocketError = (evt) => {\r\n\t console.log(\"Cannot connect to server\", evt)\r\n    }\r\n    wsObj.activate()\r\n  }\r\n\r\n  return (\r\n    <WebSocketContext.Provider value={{\r\n\t ws,\r\n\t setWsClient\r\n    }}>\r\n\t {children}\r\n    </WebSocketContext.Provider>\r\n  )\r\n}\r\n\r\nexport const useWebSocketContext = (): WebSocketContextType => useContext(WebSocketContext)\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}